
if [[ `uname` == 'Linux' ]]
then
        export LINUX=1
else
	export LINUX=
fi
umask 022

autoload predict-on		2> /dev/null
zle -N predict-on		2> /dev/null

setopt AUTO_COMPLETE		2> /dev/null
setopt AUTO_CD			2> /dev/null
setopt AUTO_LIST		2> /dev/null
setopt AUTO_NAME_DIRS		2> /dev/null
setopt AUTO_PARAM_SLASH		2> /dev/null
setopt AUTO_PUSHD		2> /dev/null
setopt BANG_HIST		2> /dev/null
setopt BARE_GLOB_QUAL		2> /dev/null
setopt BSD_ECHO			2> /dev/null
setopt CDABLE_VARS		2> /dev/null
setopt CHECK_JOBS		2> /dev/null
setopt CSH_NULL_GLOB		2> /dev/null
setopt C_BASES			2> /dev/null
setopt EXTENDED_HISTORY		2> /dev/null
setopt IGNORE_EOF		2> /dev/null
setopt INTERACTIVE_COMMENTS	2> /dev/null
setopt NOBEEP			2> /dev/null
setopt NO_BG_NICE		2> /dev/null
setopt NO_LIST_BEEP		2> /dev/null
setopt PATH_DIRS		2> /dev/null
setopt PRINT_EIGHT_BIT		2> /dev/null
setopt RM_STAR_WAIT		2> /dev/null
setopt SHARE_HISTORY		2> /dev/null

export HISTSIZE=16384
export SAVEHIST=16384
export HISTFILE=~/.zhistory

export PAGER='less +g -RSC'

function prepend_to_path {
    DIR="$1"
    if [[ -d "$1" ]]
    then
        PATH="$1:$PATH"
    fi
}

function append_to_path {
    DIR="$1"
    if [[ -d "$1" ]]
    then
        PATH="$PATH:$1"
    fi
}

prepend_to_path "$HOME/.zsh/bin"
prepend_to_path "$HOME/.bin"
prepend_to_path "$HOME/tools/bin"

append_to_path  "/opt/bin"

export GREP_COLOR="1;31"

export PATH

eval "$(lesspipe 2> /dev/null)" 2>&1 > /dev/null

if [[ "$LINUX" == '1' ]]
then
    eval `dircolors ~/.zsh/etc/dircolors` 2>&1 > /dev/null
fi

alias -g .......='../../../../../..'
alias -g ......='../../../../..'
alias -g .....='../../../..'
alias -g ....='../../..'
alias -g ...='../..'

alias /quit=exit

alias c='clear'
alias cal='cal -m'
alias cd.......='cd ../../../../../..'
alias cd......='cd ../../../../..'
alias cd.....='cd ../../../..'
alias cd....='cd ../../..'
alias cd...='cd ../..'
alias cd..='cd ..'
alias clr='echo -n > '
alias clrscr='clear'
alias cls='clear'
alias copy='cp'

alias d='ls'
alias del='rm'
alias deltree='rm -r'
alias dir='ls'

alias e='exit'
alias edit='pico'
alias exit='clear;exit'

alias f='finger'
alias friends='wf'

alias less='less +g -RSC~'
alias logout='exit'
alias ls='lsx'

alias m='more'
alias md='mkdir'
alias more='less'
alias move='mv'

alias pico='nano -wz'

alias q='exit'
alias quit='exit'

alias rd='rmdir'
alias ren='mv'
alias reset='echo -e \\017; reset'

alias save="echo SAVED."
alias sudo='sudo '

alias xcopy='cp'

alias cleanssh='kill `ps aux|grep "ssh liilak"|cut -c 6-15`; ssh liilak killall sshd; ssh liilak'
if [[ "$LINUX" == '1' ]]
then
	alias grep="grep --color=AUTO"
fi
alias dior='dir'
alias dire='dir'
alias dor='dir'
alias dur='dir'
alias mroe='more'
alias pcio='pico'
alias pciop='pico'
alias pin='pine'
alias pnie='pine'
alias ,pre='more'
alias sl='ls'
alias srln='slrn'
function comprc {
    if ~/.zsh/scripts/compile.zsh
    then
        exec zsh
    fi
} 

function update-zsh-rcs {
    (
       cd ~/.zsh/
       if [[ -e ~/tools/zsh-scripts/.svn ]]
       then
           echo "Updating ~/tools"
           cd ~/tools
           svn up
       elif [[ -e ~/.zsh/.svn ]]
       then
           echo "Updating ~/.zsh"
           svn up
       elif [[ -e ~/.zsh/.bzr ]]
       then
           echo "Updating ~/.zsh"
           bzr up
       else
           echo "Do not know how to up" ~/.zsh
       fi
    )

    comprc
}

function get-zsh-tools-file {
    echo "~/.zsh/$1"
}

function conditional-update {
    TEMPFILE=`tempfile`
    touch -d "today 00:00" $TEMPFILE 

    if [[ ! -e ~/.zsh/var/run/last_updated ]]
    then
        touch -d yesterday ~/.zsh/var/run/last_updated
    fi

    if [[ "$TEMPFILE" -nt ~/.zsh/var/run/last_updated ]]
    then
        rm "$TEMPFILE"
        echo "Checking updates for RC files"
        touch ~/.zsh/var/run/last_updated
        update-zsh-rcs
    fi
    rm "$TEMPFILE"
}

conditional-update
source ~/tools/zsh-scripts/completion/compinst
if echo $TERM | egrep -i "^(xterm|eterm|aterm|rxvt|screen)$" > /dev/null 2>&1
then
        STATUSBAR=1
fi
function preexec {
	if [[ "$STATUSBAR" == "1" ]]
	then
		echo -ne "\e]1;\a\e]2;`whoami`@`hostname` - $1\a"
       	fi
	echo -ne "\033[0m"
}

stacked_dirs=()

function precmd {
        setup_prompt
	stacked_dirs=("`pwd`" $dirstack);
        saved_dirstack=($dirstack)
        stacked_dirs_current=1

	if [[ "$STATUSBAR" == "1" ]]
	then
		echo -ne "\e]1;\a\e]2;`whoami`@`hostname` - zsh (`pwd`)\a"
	fi
       
	echo -ne "\017"

	if [[ -e ~/.newmailnotify ]]
	then
		echo -n '\033[01mUutta postia:\033[00m' | cat - ~/.newmailnotify | /bin/more
		rm -f ~/.newmailnotify
	fi	
}

function stack-cd {
    stacked_dirs_current=$(($stacked_dirs_current + $1))
    if [[ $stacked_dirs_current -lt 1 ]] {
        stacked_dirs_current=1
    }
    if [[ $stacked_dirs_current -gt $#stacked_dirs ]] {
        stacked_dirs_current=$#stacked_dirs
    }

    setopt NOAUTO_PUSHD
    cd "$stacked_dirs[$stacked_dirs_current]" 2> /dev/null
    setopt AUTO_PUSHD

    if zle
    then
        setup_prompt
        zle reset-prompt
    fi
    dir_stack=($saved_dirstack)
}

function stack-cd-forward {
   stack-cd 1 
}

function stack-cd-backward {
    stack-cd -1
}

zle -N stack-cd-forward
zle -N stack-cd-backward
bindkey '^[[1~' beginning-of-line
bindkey '^[[2~' overwrite-mode
bindkey '^[[3~' delete-char
bindkey '^[[4~' end-of-line
bindkey '^[[5~' up-history
bindkey '^[[6~' down-history
bindkey '^[[7~' beginning-of-line
bindkey '^[[8~' end-of-line
bindkey '^[OD'  backward-word
bindkey '^[OC'  forward-word
bindkey '^[^[[D' stack-cd-forward
bindkey '^[^[[C' stack-cd-backward
bindkey '^[[1;3D' stack-cd-forward
bindkey '^[[1;3C' stack-cd-backward
function check_unset_venv {
    for i in . .. ../.. ../../.. ../../../.. ../../../../.. 
    do
        if [[ -r "$i/.venv-path" ]]
        then
            cat "$i/.venv-path"
	    return
        fi
    done
}

function activate-venv {
    local new_env
    new_env=$(check_unset_venv)
    if [[ "$new_env" == "" ]] 
    then
        echo "No environment found"
        return
    fi

    if [[ "$VIRTUAL_ENV" == "$new_env" ]]
    then
        echo "The environment is already enabled"
        return
    fi

    if [[ ! -r "$new_env/bin/activate" ]]
    then
        echo "Missing virtual env, script $new_env/bin/activate not found!"
        return
    fi

    source "$new_env/bin/activate"
}

function deactivate-venv {
    deactivate 2> /dev/null
}
function setup_prompt {
    RPROMPT=`echo -ne "%B[%{\033[${PROMPT_USER_COLOR:-1;33}m%}%n%{\033[0m%}%B@%{\033[${PROMPT_HOST_COLOR:-1;33}m%}%m%b%B][%{\033[1;32m%}%T%b%B]"`
    PROMPT=`echo -ne "[%{\033[1;36m%}%~%b%B]%#"`" " 

    PROPOSED_VIRTUAL_ENV=$(check_unset_venv)
    proposed_envname=`basename "$PROPOSED_VIRTUAL_ENV"`

    if [[ "$VIRTUAL_ENV" != "" ]]
    then
        envname=`basename "$VIRTUAL_ENV"`
        
        if [[ "$PROPOSED_VIRTUAL_ENV" != "" && "$PROPOSED_VIRTUAL_ENV" != "$VIRTUAL_ENV" ]]
        then
            PROMPT=`echo -ne "%{\033[1;33m%}[%{\033[0;31;43m%}$proposed_envname%{\033[0;33;1m%}]%{\033[0m%}"`"$PROMPT"
        fi

        PROMPT=`echo -ne "%{\033[1;36m%}[%{\033[1;34m%}$envname%{\033[36m%}]%{\033[0m%}"`"$PROMPT"
    else
        if [[ "$proposed_envname" != "" ]]
        then
            PROMPT=`echo -ne "%{\033[1;31m%}[%{\033[0;30;41;5m%}$proposed_envname%{\033[0;31;1m%}]%{\033[0m%}"`"$PROMPT"
        fi
    fi
}

setup_prompt
